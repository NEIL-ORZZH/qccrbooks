package com.qccr.books.lib.util.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BOOK".
 */
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    public BookDao(DaoConfig config) {
        super(config);
    }


    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RATING\" TEXT," + // 1: rating
                "\"TITLE\" TEXT," + // 2: title
                "\"ORGIN_TITLE\" TEXT," + // 3: orginTitle
                "\"AUTHOR\" TEXT," + // 4: author
                "\"SMALL_PIC\" TEXT," + // 5: smallPic
                "\"MEDIUM_PIC\" TEXT," + // 6: mediumPic
                "\"LARGE_PIC\" TEXT," + // 7: largePic
                "\"ISBN\" TEXT," + // 8: isbn
                "\"SUMMARY\" TEXT," + // 9: summary
                "\"PUBLISHER\" TEXT," + // 10: publisher
                "\"PRICE\" TEXT," + // 11: price
                "\"PAGES\" TEXT," + // 12: pages
                "\"API_URL\" TEXT);"); // 13: apiUrl
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(2, rating);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }

        String orginTitle = entity.getOrginTitle();
        if (orginTitle != null) {
            stmt.bindString(4, orginTitle);
        }

        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }

        String smallPic = entity.getSmallPic();
        if (smallPic != null) {
            stmt.bindString(6, smallPic);
        }

        String mediumPic = entity.getMediumPic();
        if (mediumPic != null) {
            stmt.bindString(7, mediumPic);
        }

        String largePic = entity.getLargePic();
        if (largePic != null) {
            stmt.bindString(8, largePic);
        }

        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(9, isbn);
        }

        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }

        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(11, publisher);
        }

        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(12, price);
        }

        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(13, pages);
        }

        String apiUrl = entity.getApiUrl();
        if (apiUrl != null) {
            stmt.bindString(14, apiUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(2, rating);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }

        String orginTitle = entity.getOrginTitle();
        if (orginTitle != null) {
            stmt.bindString(4, orginTitle);
        }

        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }

        String smallPic = entity.getSmallPic();
        if (smallPic != null) {
            stmt.bindString(6, smallPic);
        }

        String mediumPic = entity.getMediumPic();
        if (mediumPic != null) {
            stmt.bindString(7, mediumPic);
        }

        String largePic = entity.getLargePic();
        if (largePic != null) {
            stmt.bindString(8, largePic);
        }

        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(9, isbn);
        }

        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }

        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(11, publisher);
        }

        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(12, price);
        }

        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(13, pages);
        }

        String apiUrl = entity.getApiUrl();
        if (apiUrl != null) {
            stmt.bindString(14, apiUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rating
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orginTitle
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // smallPic
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mediumPic
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // largePic
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isbn
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // summary
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // publisher
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // price
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pages
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // apiUrl
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRating(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrginTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSmallPic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMediumPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLargePic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsbn(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSummary(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPublisher(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPages(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setApiUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
    }

    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Book entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rating = new Property(1, String.class, "rating", false, "RATING");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property OrginTitle = new Property(3, String.class, "orginTitle", false, "ORGIN_TITLE");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property SmallPic = new Property(5, String.class, "smallPic", false, "SMALL_PIC");
        public final static Property MediumPic = new Property(6, String.class, "mediumPic", false, "MEDIUM_PIC");
        public final static Property LargePic = new Property(7, String.class, "largePic", false, "LARGE_PIC");
        public final static Property Isbn = new Property(8, String.class, "isbn", false, "ISBN");
        public final static Property Summary = new Property(9, String.class, "summary", false, "SUMMARY");
        public final static Property Publisher = new Property(10, String.class, "publisher", false, "PUBLISHER");
        public final static Property Price = new Property(11, String.class, "price", false, "PRICE");
        public final static Property Pages = new Property(12, String.class, "pages", false, "PAGES");
        public final static Property ApiUrl = new Property(13, String.class, "apiUrl", false, "API_URL");
    }

}
